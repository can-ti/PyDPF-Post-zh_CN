
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples\04-Fluid-Examples\00-explore-fluid-simulation.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_examples_04-Fluid-Examples_00-explore-fluid-simulation.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_04-Fluid-Examples_00-explore-fluid-simulation.py:


.. _ref_fluid_example_extractions:

Fluid Simulation Result Extraction
==================================
This example shows how to load a fluid simulation (here a heating coil simulated with CFX),
explore the metadata available, and use the result extraction capabilities.

.. note::
    This example requires DPF 7.0 (2024.1.pre0) or above.
    For more information, see :ref:`compatibility`.

.. GENERATED FROM PYTHON SOURCE LINES 15-17

Perform required imports
------------------------

.. GENERATED FROM PYTHON SOURCE LINES 17-20

.. code-block:: Python

    from ansys.dpf import post
    from ansys.dpf.post import examples








.. GENERATED FROM PYTHON SOURCE LINES 21-23

Load the fluid analysis result
------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 23-31

.. code-block:: Python

    fluid_example_files = examples.download_cfx_heating_coil()
    simulation = post.FluidSimulation(
        cas=fluid_example_files["cas"], dat=fluid_example_files["dat"]
    )
    # Printing the simulation will show most of the available metadata
    print(simulation)




.. rst-class:: sphx-glr-script-out

.. code-block:: pytb

    Traceback (most recent call last):
      File "G:\Github\PyDPF-Post-zh_CN\examples\04-Fluid-Examples\00-explore-fluid-simulation.py", line 23, in <module>
        fluid_example_files = examples.download_cfx_heating_coil()
      File "C:\Users\ff\AppData\Roaming\Python\Python310\site-packages\ansys\dpf\core\examples\downloads.py", line 1549, in download_cfx_heating_coil
        "cas": _download_file(
      File "C:\Users\ff\AppData\Roaming\Python\Python310\site-packages\ansys\dpf\core\examples\downloads.py", line 81, in _download_file
        local_path = _retrieve_file(url, filename, directory)
      File "C:\Users\ff\AppData\Roaming\Python\Python310\site-packages\ansys\dpf\core\examples\downloads.py", line 75, in _retrieve_file
        _, resp = urlretrieve(url, local_path)
      File "C:\Users\ff\AppData\Local\Programs\Python\Python310\lib\urllib\request.py", line 241, in urlretrieve
        with contextlib.closing(urlopen(url, data)) as fp:
      File "C:\Users\ff\AppData\Local\Programs\Python\Python310\lib\urllib\request.py", line 216, in urlopen
        return opener.open(url, data, timeout)
      File "C:\Users\ff\AppData\Local\Programs\Python\Python310\lib\urllib\request.py", line 525, in open
        response = meth(req, response)
      File "C:\Users\ff\AppData\Local\Programs\Python\Python310\lib\urllib\request.py", line 634, in http_response
        response = self.parent.error(
      File "C:\Users\ff\AppData\Local\Programs\Python\Python310\lib\urllib\request.py", line 557, in error
        result = self._call_chain(*args)
      File "C:\Users\ff\AppData\Local\Programs\Python\Python310\lib\urllib\request.py", line 496, in _call_chain
        result = func(*args)
      File "C:\Users\ff\AppData\Local\Programs\Python\Python310\lib\urllib\request.py", line 749, in http_error_302
        return self.parent.open(new, timeout=req.timeout)
      File "C:\Users\ff\AppData\Local\Programs\Python\Python310\lib\urllib\request.py", line 519, in open
        response = self._open(req, data)
      File "C:\Users\ff\AppData\Local\Programs\Python\Python310\lib\urllib\request.py", line 536, in _open
        result = self._call_chain(self.handle_open, protocol, protocol +
      File "C:\Users\ff\AppData\Local\Programs\Python\Python310\lib\urllib\request.py", line 496, in _call_chain
        result = func(*args)
      File "C:\Users\ff\AppData\Local\Programs\Python\Python310\lib\urllib\request.py", line 1391, in https_open
        return self.do_open(http.client.HTTPSConnection, req,
      File "C:\Users\ff\AppData\Local\Programs\Python\Python310\lib\urllib\request.py", line 1351, in do_open
        raise URLError(err)
    urllib.error.URLError: <urlopen error [Errno 11004] getaddrinfo failed>




.. GENERATED FROM PYTHON SOURCE LINES 32-35

Explore the available metadata
------------------------------
Check the available cell and face zones

.. GENERATED FROM PYTHON SOURCE LINES 35-38

.. code-block:: Python

    print(simulation.cell_zones)
    print(simulation.face_zones)


.. GENERATED FROM PYTHON SOURCE LINES 39-42

The mesh metadata is available separately from the mesh
as accessing the mesh means loading it.
Use the mesh_info property to explore the mesh structure to define queries

.. GENERATED FROM PYTHON SOURCE LINES 42-44

.. code-block:: Python

    print(simulation.mesh_info)


.. GENERATED FROM PYTHON SOURCE LINES 45-46

Check the available species

.. GENERATED FROM PYTHON SOURCE LINES 46-48

.. code-block:: Python

    print(simulation.species)


.. GENERATED FROM PYTHON SOURCE LINES 49-50

Check the available phases

.. GENERATED FROM PYTHON SOURCE LINES 50-53

.. code-block:: Python

    print(simulation.phases)



.. GENERATED FROM PYTHON SOURCE LINES 54-58

Extract a result
 ----------------
##############################################################################
 Check the metadata on available results

.. GENERATED FROM PYTHON SOURCE LINES 58-60

.. code-block:: Python

    print(simulation.result_info)


.. GENERATED FROM PYTHON SOURCE LINES 61-62

Print information about a specific available result

.. GENERATED FROM PYTHON SOURCE LINES 62-66

.. code-block:: Python

    print(simulation.result_info["temperature"])
    # Or use an index
    # print(simulation.result_info[12])


.. GENERATED FROM PYTHON SOURCE LINES 67-69

Extract the temperature data
----------------------------

.. GENERATED FROM PYTHON SOURCE LINES 69-74

.. code-block:: Python

    temperature = simulation.temperature()
    print(temperature)

    # # The dataframe obtained shows data for two different phases


.. GENERATED FROM PYTHON SOURCE LINES 75-76

Select data for phase 2 only (Water)

.. GENERATED FROM PYTHON SOURCE LINES 76-78

.. code-block:: Python

    print(temperature.select(phase=[2]))


.. GENERATED FROM PYTHON SOURCE LINES 79-86

To directly extract the temperature data for a given phase,
pass the 'temperature' method a 'phases' argument.
This argument must be given a list of phase unique identifiers, which appear
in the dataframe in the phase label column between parentheses,
or as listed
under the 'Available qualifier labels' section of the metadata on the result
You can also directly use the phase name.

.. GENERATED FROM PYTHON SOURCE LINES 86-92

.. code-block:: Python

    water_temperature = simulation.temperature(phases=["Water at 25 C"])
    # equivalent to
    # water_temperature = simulation.temperature(phases=[2])
    print(water_temperature)
    # # The dataframe obtained now only stores data for the water phase.


.. GENERATED FROM PYTHON SOURCE LINES 93-96

To extract a result on given zones use the 'zone_ids' argument
or the 'qualifiers' dictionary argument with key 'zone'
Here we request and plot the temperature on all face zones

.. GENERATED FROM PYTHON SOURCE LINES 96-98

.. code-block:: Python

    face_temperature = simulation.temperature(zone_ids=list(simulation.face_zones.keys()))
    face_temperature.plot()


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 1.086 seconds)


.. _sphx_glr_download_examples_04-Fluid-Examples_00-explore-fluid-simulation.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: 00-explore-fluid-simulation.ipynb <00-explore-fluid-simulation.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: 00-explore-fluid-simulation.py <00-explore-fluid-simulation.py>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
